{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","successMessage","errorMessage","className","Filter","termToFilter","handleFilterChange","value","onChange","PersonForm","name","number","nameHandler","numberHandler","formSubmition","onSubmit","type","Persons","personsToShow","deleteHandler","map","person","onClick","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setTermToFilter","setSuccessMessage","setErrorMessage","useEffect","personsService","initialPersons","catch","error","filter","toLowerCase","includes","createPerson","returnedPerson","concat","setTimeout","updatePerson","window","confirm","personObject","updatedIndex","findIndex","personToCheck","updatedArray","event","target","preventDefault","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.156765a9.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\nconst put = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, deletePerson, put }","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\nimport './App.css'\n\nconst Notification = ({successMessage, errorMessage}) => {\n  if(successMessage === null && errorMessage === null)\n      return null\n  return(\n    <div>\n      {\n        (successMessage !== null \n        && \n        <div className=\"success\">\n            {successMessage}\n        </div>)\n        ||\n        (errorMessage !== null \n        &&\n        <div className=\"error\">\n          {errorMessage}\n        </div>)\n      }\n    </div>\n  )\n}\n\nconst Filter = ({termToFilter,handleFilterChange}) => {\n  return(<div>filter with <input value={termToFilter} onChange={handleFilterChange}/></div>)\n}\nconst PersonForm = ({name,number,nameHandler, numberHandler, formSubmition}) => {\n  return(<form onSubmit={formSubmition}>\n        <div> name: <input value={name} onChange={nameHandler}/> </div>\n        <div>number: <input value={number} onChange={numberHandler}/></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>)\n}\nconst Persons = ({personsToShow, deleteHandler}) => {\n  return(personsToShow.map(person => \n    <div key={person.name}>\n      {person.name} {person.number}\n      <button onClick={() => deleteHandler(person)}>delete</button>\n    </div>))\n}\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [termToFilter, setTermToFilter] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () =>{\n    personsService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      }).catch(error => {\n\n      })\n  }\n\n  useEffect(hook,[])\n\n  const personsToShow = termToFilter ? persons.filter( person => person.name.toLowerCase().includes(termToFilter.toLowerCase())) : persons\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const person = persons.find((person) => person.name === newName)\n    person ? updatePerson(person) : createPerson()\n  }\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setTermToFilter(event.target.value)\n  const deletePerson = person => {\n    if(window.confirm(`Are you sure that you want to delete ${person.name} number?`)){\n      personsService\n        .deletePerson(person.id)\n        .then( () => {setPersons(persons.filter( personToCheck => personToCheck.id !== person.id ))})\n        .catch(error => {})\n    }\n  }\n  const createPerson = () => {\n    const personObject = {\n      name:newName, \n      number: newNumber\n    }\n    personsService\n      .create(personObject)\n      .then(returnedPerson =>{\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setSuccessMessage(\"Added \" + returnedPerson.name)\n        setTimeout(() => {\n          setSuccessMessage(null)        \n        }, 5000)\n      })\n      .catch(error => {})\n  }\n  const updatePerson = person => {\n    if(window.confirm(`Are you sure that you want to replace old number of ${person.name}, with a new one ?`)){\n      const personObject = {\n        id: person.id,\n        name: person.name,\n        number: newNumber\n      }\n      personsService\n        .put(person.id, personObject)\n        .then(returnedPerson => {\n          const updatedIndex = persons.findIndex(personToCheck => personToCheck.id === person.id)\n          let updatedArray = [...persons]\n          updatedArray[updatedIndex] = returnedPerson\n          setPersons(updatedArray)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          setErrorMessage(\"Information of \" + person.name +\" has already been removed from server\")\n          setTimeout(() => {\n            setErrorMessage(null)        \n          }, 5000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification successMessage={successMessage} errorMessage={errorMessage}/>\n      <Filter termToFilter={termToFilter} handleFilterChange={handleFilterChange}/>\n      <h2>Add new</h2>\n      <PersonForm name={newName} number={newNumber}  formSubmition={addPerson} nameHandler={handleNameChange} numberHandler={handleNumberChange} />\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} deleteHandler={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}